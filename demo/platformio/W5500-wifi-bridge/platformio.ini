; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


[env:esp32-c6-devkitc-1]
platform = https://github.com/mnowak32/platform-espressif32.git#boards/seeed_xiao_esp32c6
platform_packages = 
    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.5
    framework-arduinoespressif32-libs @ https://github.com/espressif/arduino-esp32/releases/download/3.0.2/esp32-arduino-libs-3.0.5.zip
	platformio/framework-arduinoespressif32-libs @ https://github.com/espressif/esp32-arduino-libs.git#idf-release/v5.1
	
framework = arduino
board = seeed_xiao_esp32c6

; lib_ldf_mode = deep+                                    ;在搜索库依赖关系时使用 "深度+" 模式，编译容易出错
; lib_ldf_mode =chain+				 					  ;在搜索库依赖关系时使用 "链式+" 模式，编译容易出错
build_type = debug

upload_port=COM10
monitor_port=COM10
upload_speed=460800
monitor_speed = 115200									;指定串口调试助手的波特率为115200，默认为9600
upload_protocol = esptool								;下载工具为esptool

monitor_filters = esp32_exception_decoder               ;可以过滤或打印错误信息到串口调试助手

build_flags = 
	-DCORE_DEBUG_LEVEL=5
	-Wno-unused-function
	-Wno-unused-variable
	-std=gnu++11 -DHW_ESP32
	-DBUFFER_SIZE=32
	-D_BSD_SOURCE
	-DCONFIG_SPIRAM_ALLOW_STACK_EXTERNAL_MEMORY			;使用外部 PSRAM 来扩展堆栈内存
	-DDEBUG -DTIMER_DEBUG
	-DCONFIG_SPIRAM_TYPE=PSRAM							;添加到编译命令中，你告诉编译器和 ESP32 的开发框架，你的 ESP32 设备具有外部 PSRAM
	-DBOARD_HAS_PSRAM									;启用PSRAM,用于在代码中指示是否支持外部 PSRAM
	-DARDUINO_USB_MODE=1
	-DARDUINO_EVENT_RUNNING_CORE=1
	-DARDUINO_EVENT_RUNNING_CORE_1=1
	-DARDUINO_EVENT_RUNNING_CORE_2=1
	; -mfix-esp32-psram-cache-issue                       ;使用外部 PSRAM 时，某些情况下可能会出现缓存问题，这个选项可以尝试修复这些问题,解释参考https://thingpulse.com/esp32-how-to-use-psram/
	 
	; -DMBEDTLS_CONFIG_FILE="mbedtls/esp_config.h"
; board_build.partitions = huge_app.csv	

;board_build.arduino.partitions = default_16MB.csv
;board_build.arduino.partitions = app3M_fat9M_16MB.csv	; 指定为16MB的FLASH分区表,3M APP1和APP2,9M littlefs
; board_build.arduino.partitions = Large_spiffs_16MB.csv  ; 指定为16MB的FLASH分区表,4.5M APP1和APP2,6.8M littlefs
; board_build.arduino.partitions =default_8MB.csv
; board_upload.flash_size = 16MB                          ; 指定FLASH容量为16MB

; board_build.arduino.memory_type = qio_opi
; board_build.f_cpu = 240000000L
; board_build.flash_freq=80M
; board_build.flash_mode = qio
; board_build.bootloader = dio

board_build.filesystem = littlefs                       ;使用LittleFS的正确方法

lib_ignore = 
    LittleFS_esp32


lib_deps =
	ArduinoHttpClient

